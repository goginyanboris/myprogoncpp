#include <iostream>
#include <iomanip>
#include <vector>
#include <cmath>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <clocale>

using namespace std;

// Дан класс «Список». Реализовать оператор-функцию: + добавления элемента в список и — для удаления.

struct element //Структура с инфополями и адресным полем
{
 int x; //Инфополе, значения из x будут передаваться в список
 element *Next; //Адресное поле
};

class List //Класс Список
{
 element *Head; //Указатель на последний активный элемент или просто голова списка
 public:
  List() //Конструктор и инициализация указателя пустым значением
  {
    Head = NULL;
  }
 ~List(){ //Деструктор.
    while (Head!=NULL)  //Пока по адресу не пусто
     {
        element *temp = Head->Next; //Временная переменная для хранения адреса следующего элемента
        delete Head; //Освобождаем адрес обозначающий начало
        Head = temp; //Меняем адрес на следующий
     }
 }
 void operator +(int*);//прототип метода класса в котором мы перегрузим оператор +
 void operator -=(int*);
 void Show(); //Функция для отображения списка на экране
};

void List::operator +(int *x) // что должен выполнить оператор +
{
 element *temp = new element; // При каждом вызове выделяется память
 temp->x = *x; // Записываем x в элемент структуры  element (в x структуры element)
 temp->Next = Head; // Указываем, что след. элемент это объект по адресу Head
 Head = temp; // Указываем, что последний активный элемент это только что введенный
}

void List::operator -=(int *y) // что должен выполнить оператор -=
{
 element *t;
 element *temp = Head; // Определяем указатель, который изначально равен адресу начала списка
 while((Head != NULL) && (Head->x == *y)){  // пока все первые элементы равны у
     temp = temp->Next; // положим в переменную адреса temp адрес следующего элемента списка
     delete Head; // удалим первый
     Head = temp;// сделаем начальным следующий элемент
 }
 while(Head != NULL && (temp->Next) != NULL){ // если список не пуст или существует следующий элемент
    if((temp->Next) ->x == *y){
        t = temp->Next;// удаление промежуточных
        temp->Next = t->Next;
        delete t;
    }
    else{
        temp = temp->Next;
    }
 }
 if(temp->x == *y){
    delete temp; // удаление последнего
 }
}

void List::Show() //Функция отображения списка на экране
{
 element *temp = Head; //Определяем указатель, который изначально равен адресу начала списка

 while (temp != NULL) //До тех пор пока не встретит пустое значение
 {
  cout<< temp->x << " "; //Выведет элемент x из списка
  temp = temp->Next; //Указываем, что далее нам нужен следующий элемент
 }
 cout << endl;
}

int main()
{
  int N = 3; //Число элементов в список
  int x; //Элементы вводимые в список
  List lst; //Переменная, тип которой список

while(N != 0)
 {
  setlocale(LC_CTYPE, "rus"); // вызов функции настройки локали
  cout << "Введите 0 для завершения работы, 1 - для добавления х в список, 2 - для удаления элемента х, если он есть" << endl;
  cin >> N; //Ввод действия с клавиатуры
  if (N == 1){
    cin >> x;
    lst + &x;
    lst.Show(); //Вывод списка на экран
  }
  else if (N == 2){
    cin >> x;
    lst -= &x;
    lst.Show(); //Вывод списка на экран
  }
 }
return 0;
}
